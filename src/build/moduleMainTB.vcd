$date
	Thu Aug 29 20:30:08 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module moduleMainTB $end
$var wire 7 ! seg7 [6:0] $end
$var wire 4 " led [3:0] $end
$var wire 2 # disp [1:0] $end
$var reg 1 $ button $end
$var reg 4 % gray [3:0] $end
$scope module Top $end
$var wire 4 & codigo_gray_pi [3:0] $end
$var wire 1 $ rst_pi $end
$var wire 4 ' codigo_bin_led_po [3:0] $end
$var wire 4 ( cod_bin [3:0] $end
$var wire 7 ) catodo_po [6:0] $end
$var wire 2 * anodo_po [1:0] $end
$scope module Gray $end
$var wire 4 + codigo_gray_pi [3:0] $end
$var wire 4 , cod_bin [3:0] $end
$upscope $end
$scope module LEDs $end
$var wire 4 - cod_bin [3:0] $end
$var wire 4 . codigo_bin_led_po [3:0] $end
$upscope $end
$scope module seg7 $end
$var wire 4 / cod_bin [3:0] $end
$var wire 1 $ rst_pi $end
$var wire 1 0 sd_X $end
$var wire 1 1 sd_Y $end
$var wire 1 2 sd_Z $end
$var wire 1 3 seg_a $end
$var wire 1 4 seg_b $end
$var wire 1 5 seg_c $end
$var wire 1 6 seg_d $end
$var wire 1 7 seg_e $end
$var wire 1 8 seg_f $end
$var wire 1 9 seg_g $end
$var wire 7 : catodo_po [6:0] $end
$var wire 1 ; b4 $end
$var wire 1 < b3 $end
$var wire 1 = b2 $end
$var wire 1 > b1 $end
$var wire 2 ? anodo_po [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ?
0>
0=
0<
0;
bx0 :
09
18
17
16
15
14
13
02
11
10
b0 /
b0 .
b0 -
b0 ,
b0 +
bx *
bx0 )
b0 (
b0 '
b0 &
b0 %
x$
bx #
b0 "
bx0 !
$end
#1000
b1111110 !
b1111110 )
b1111110 :
b1 #
b1 *
b1 ?
0$
#2000
b10 #
b10 *
b10 ?
1$
#4000
b1 #
b1 *
b1 ?
0$
#6000
06
08
03
b110000 !
b110000 )
b110000 :
07
b1 "
b1 '
b1 .
1;
b1 (
b1 ,
b1 -
b1 /
b1 %
b1 &
b1 +
#8000
17
b1101101 !
b1101101 )
b1101101 :
16
05
13
0;
19
b10 "
b10 '
b10 .
1<
b10 (
b10 ,
b10 -
b10 /
b11 %
b11 &
b11 +
#11000
07
b1111001 !
b1111001 )
b1111001 :
15
b11 "
b11 '
b11 .
1;
b11 (
b11 ,
b11 -
b11 /
b10 %
b10 &
b10 +
#15000
18
06
03
b110011 !
b110011 )
b110011 :
14
0;
19
0<
b100 "
b100 '
b100 .
1=
b100 (
b100 ,
b100 -
b100 /
b110 %
b110 &
b110 +
#20000
04
b1011011 !
b1011011 )
b1011011 :
16
13
b101 "
b101 '
b101 .
1;
b101 (
b101 ,
b101 -
b101 /
b111 %
b111 &
b111 +
#26000
17
b1011111 !
b1011111 )
b1011111 :
04
0;
b110 "
b110 '
b110 .
1<
b110 (
b110 ,
b110 -
b110 /
b101 %
b101 &
b101 +
#33000
b1110000 !
b1110000 )
b1110000 :
07
09
06
08
14
b111 "
b111 '
b111 .
1;
b111 (
b111 ,
b111 -
b111 /
b100 %
b100 &
b100 +
#41000
17
0;
16
13
0<
b1111111 !
b1111111 )
b1111111 :
19
18
0=
14
10
b1000 "
b1000 '
b1000 .
1>
b1000 (
b1000 ,
b1000 -
b1000 /
b1100 %
b1100 &
b1100 +
#50000
b1111011 !
b1111011 )
b1111011 :
07
b1001 "
b1001 '
b1001 .
1;
b1001 (
b1001 ,
b1001 -
b1001 /
b1101 %
b1101 &
b1101 +
#60000
16
b1111110 !
b1111110 )
b1111110 :
18
17
13
09
00
0;
b1010 "
b1010 '
b1010 .
1<
b1010 (
b1010 ,
b1010 -
b1010 /
b1111 %
b1111 &
b1111 +
#71000
06
03
b110000 !
b110000 )
b110000 :
08
07
b1011 "
b1011 '
b1011 .
1;
b1011 (
b1011 ,
b1011 -
b1011 /
b1110 %
b1110 &
b1110 +
#83000
17
16
19
05
b1101101 !
b1101101 )
b1101101 :
0;
14
13
0<
b1100 "
b1100 '
b1100 .
1=
b1100 (
b1100 ,
b1100 -
b1100 /
b1010 %
b1010 &
b1010 +
#96000
07
b1111001 !
b1111001 )
b1111001 :
15
b1101 "
b1101 '
b1101 .
1;
b1101 (
b1101 ,
b1101 -
b1101 /
b1011 %
b1011 &
b1011 +
#110000
06
14
b110011 !
b110011 )
b110011 :
03
18
0;
b1110 "
b1110 '
b1110 .
1<
b1110 (
b1110 ,
b1110 -
b1110 /
b1001 %
b1001 &
b1001 +
#125000
16
04
b1011011 !
b1011011 )
b1011011 :
13
b1111 "
b1111 '
b1111 .
1;
b1111 (
b1111 ,
b1111 -
b1111 /
b1000 %
b1000 &
b1000 +
#141000
b110000 !
b110000 )
b110000 :
b10 #
b10 *
b10 ?
1$
#158000
b1111110 !
b1111110 )
b1111110 :
10
16
07
0<
14
0=
13
b1001 "
b1001 '
b1001 .
1;
b1001 (
b1001 ,
b1001 -
b1001 /
b1101 %
b1101 &
b1101 +
#176000
16
18
17
13
09
b110000 !
b110000 )
b110000 :
00
0;
b1010 "
b1010 '
b1010 .
1<
b1010 (
b1010 ,
b1010 -
b1010 /
b1111 %
b1111 &
b1111 +
#195000
06
03
08
07
b1011 "
b1011 '
b1011 .
1;
b1011 (
b1011 ,
b1011 -
b1011 /
b1110 %
b1110 &
b1110 +
#215000
17
16
19
05
0;
14
13
0<
b1100 "
b1100 '
b1100 .
1=
b1100 (
b1100 ,
b1100 -
b1100 /
b1010 %
b1010 &
b1010 +
#236000
07
15
b1101 "
b1101 '
b1101 .
1;
b1101 (
b1101 ,
b1101 -
b1101 /
b1011 %
b1011 &
b1011 +
#258000
06
14
03
18
0;
b1110 "
b1110 '
b1110 .
1<
b1110 (
b1110 ,
b1110 -
b1110 /
b1001 %
b1001 &
b1001 +
#281000
16
04
13
b1111 "
b1111 '
b1111 .
1;
b1111 (
b1111 ,
b1111 -
b1111 /
b1000 %
b1000 &
b1000 +
#305000
